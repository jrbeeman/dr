<?php

module_load_include('inc', 'dr', 'dr.reports');

/**
 * Implementation of hook_menu().
 */
function dr_menu() {
  $items = array();
  // Taxonomy report
  $items['report/taxonomy'] = array(
    'page callback' => 'dr_report_taxonomy',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Utility for reports
 * - Make sure there's an entry for every day in the thread
 */
function dr_fill_array_dates(&$dates, $start, $end) {
  $one_day = 24 * 60 * 60;
  $two_days = 2 * $one_day;

  // Make sure the array has at least 3 items
  if ($start == $end || ($end - $start) < $one_day) {
    $start -= $one_day;
    $end += $one_day;
  }
  if (($end - $start) < $two_days) {
    $end += $one_day;
  }

  $date = $start;
  while ($date <= $end) {
    if (!array_key_exists($date, $dates)) {
      $dates[$date] = 0;
    }
    $date += (24 * 60 * 60);
  }
  ksort($dates);
}

function dr_filter_array(&$data, $max) {
  $count = count($data);
  $gi = 0; // global counter that doesn't reset (for the run of the method)
  if ($count > $max) {
    $new_data = array();
    $scale = round($count / $max);
    if ($scale > 1) {
      $i = 0;
      $key_tmp = '';
      $count_tmp = 0;
      foreach ($data as $key => $value) {
        $i++;
        $gi++;
        $value_tmp += $value;
        if ($i == 1) {
          $key_tmp = $key;
        }
        if ($i == $scale || $gi == $count) {
          $new_data[$key_tmp] = $value_tmp;
          $i = 0;
          $value_tmp = 0;
        }
      }
      $data = $new_data;
    }
  }
}

/**
 * Implementation of hook_block().
 */
function dr_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['taxonomy'] = array(
      'info' => t('DR Report: Taxonomy'),
    );
    $blocks['thread_taxonomy'] = array(
      'info' => t('DR Report: Thread taxonomy'),
    );
    $blocks['thread_activity'] = array(
      'info' => t('DR Report: Thread activity by date'),
    );
    $blocks['thread_taxonomy_activity'] = array(
      'info' => t('DR Report: Thread taxonomy activity by date'),
    );
    $blocks['user_taxonomy'] = array(
      'info' => t('DR Report: User taxonomy'),
    );
    $blocks['user_activity'] = array(
      'info' => t('DR Report: User activity by date'),
    );
    $blocks['user_taxonomy_activity'] = array(
      'info' => t('DR Report: User taxonomy activity by date'),
    );

    // Set the caching for all blocks to be per-page
    foreach ($blocks as $key => $block) {
      $block['cache'] = BLOCK_CACHE_PER_PAGE;
      $blocks[$key] = $block;
    }
    return $blocks;
  }

  if ($op == 'view') {
    $function = 'dr_block_'. $delta;
    $block = $function();
    return $block;
  }
}

function dr_block_thread_activity() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    // Only show for top-level dr_user nodes
    $node = node_load(arg(1));
    if (($node->type != 'dr_post') || ($node->field_dr_parent[0]['nid'])) {
      // This is a child post of a larger thread and, therefore, has no thread activity
      return;
    }

    $dates = array();
    $date_start = strtotime(format_date($node->field_dr_date[0]['value'], 'custom', 'Y-m-d'));
    $dates[$date_start] = 1; // Count the post itself as part of the total
    $date_end = NULL;
    
    $sql = "SELECT
            n.nid, n.vid,
            cck.field_dr_date_value AS date
            FROM {node} n
            INNER JOIN {content_type_dr_post} cck ON n.vid = cck.vid
            WHERE cck.field_dr_parent_nid = %d";
    $result = db_query($sql, $node->nid);
    while ($row = db_fetch_object($result)) {
      $timestamp = strtotime(format_date($row->date, 'custom', 'Y-m-d'));
      $dates[$timestamp]++;
      $date_end = $timestamp;
    }

    return array(
      'subject' => t('Thread activity'),
      'content' => dr_chart_activity_by_date($dates, $date_start, $date_end),
    );
  }  
}

function dr_block_user_activity() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {

    // Only show for dr_user nodes
    $node = node_load(arg(1));
    if ($node->type != 'dr_user') {
      return;
    }

    $dates = array();
    $date_start = NULL;
    $date_end = NULL;

    $sql = "SELECT
            n.nid, n.vid,
            cck.field_dr_date_value AS date
            FROM {node} n
            INNER JOIN {content_type_dr_post} cck ON n.vid = cck.vid
            WHERE cck.field_dr_user_nid = %d";
    $result = db_query($sql, $node->nid);
    while ($row = db_fetch_object($result)) {
      $timestamp = strtotime(format_date($row->date, 'custom', 'Y-m-d'));
      // Negotiate the start and end date
      if ($timestamp < $date_start || !$date_start) {
        $date_start = $timestamp;
      }
      if ($timestamp > $date_end || !$date_end) {
        $date_end = $timestamp;
      }
      $dates[$timestamp]++;
      $date_end = $timestamp;
    }

    return array(
      'subject' => t('User activity'),
      'content' => dr_chart_activity_by_date($dates, $date_start, $date_end),
    );
  }
}
