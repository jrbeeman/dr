<?php

function dr_init() {
  $path = drupal_get_path('module', 'dr');
  drupal_add_css($path .'/custom.css');
}

/**
 * Implementation of hook_menu().
 */
function dr_menu() {
  $items = array();
  // Node edit JS callback
  $items['dr-node/%node'] = array(
    'page callback' => 'dr_node_form_js',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
  );
  // Comment edit JS callback
  $items['dr-comment/%_comment'] = array(
    'page callback' => 'dr_comment_form_js',
    'page arguments' => array(1),
    'access callback' => 'comment_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_LOCAL_TASK,
  );
  // Taxonomy report
  $items['report/taxonomy'] = array(
    'page callback' => 'dr_report_taxonomy',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function dr_report_taxonomy_filter($form_state, $vid = NULL) {
  $vocabs = taxonomy_get_vocabularies();
  $options = array();
  foreach ($vocabs as $vocab) {
    $options[$vocab->vid] = $vocab->name;
  }
  $form = array(
    '#prefix' => '<div class="container-inline">', 
    '#suffix' => '</div>',
  );
  $form['vid'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary'),
    '#options' => $options,
    '#default_value' => $vid,
  );
  $form['limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit'),
    '#default_value' => $_GET['limit'],
    '#size' => 5,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function dr_report_taxonomy_filter_submit(&$form, $form_values) {
  drupal_goto('report/taxonomy/'.$form_values['values']['vid'], 'limit='.$form_values['values']['limit']);
}

function dr_report_user_taxonomy($uid, $vid, $ignore_zero = FALSE) {
  $vocabulary = taxonomy_vocabulary_load($vid);
  // Get nodes
  $sql = "SELECT td.tid AS tid,
          td.name AS name,
          COUNT(n.nid) AS num
          FROM {term_data} td
            LEFT JOIN {term_node} tn ON tn.tid = td.tid
            LEFT JOIN {node} n ON n.vid = tn.vid AND n.uid = %d 
          WHERE td.vid = %d
          GROUP BY td.name ";
  $result = db_query($sql, $uid, $vid);
  $data = array();
  $count_total = 0;
  while ($row = db_fetch_object($result)) {
    $data[$row->tid] = array(
      'name' => $row->name,
      'value' => $row->num,
    );
    $count_total += $row->num;
  }
  // Get comments
  $sql = "SELECT td.tid AS tid,
          td.name AS name,
          COUNT(c.cid) AS num
          FROM {term_data} td
            LEFT JOIN {term_comment} tc ON tc.tid = td.tid
            LEFT JOIN {comments} c ON c.cid = tc.cid AND c.uid = %d
          WHERE td.vid = %d
          GROUP BY td.name";
  $result = db_query($sql, $uid, $vid);
  while ($row = db_fetch_object($result)) {
    if (isset($data[$row->tid])) {
      $data[$row->tid]['value'] += $row->num;
    }
    else {
      $data[$row->tid] = array(
        'name' => $row->name,
        'value' => $row->num ? $row->num : 0,
      );
    }
    $count_total += $row->num;
  }

  $chart_data = array();
  foreach ($data as $key => $value) {
    if ($ignore_zero && !$value['value']) {
      continue;
    }
    else {
      $chart_data[] = array($value['name'], $value['value']);
    }
  }

  if (!count($chart_data) || !$count_total) {
    return;
  }
  
  $height = count($chart_data) * 25;
  if ($height < 200) {
    $height = 200;
  }

  $info->data = $chart_data;
  $info->chart_type = 'Bar 2D';
  $info->settings = array(
    'caption' => t('Terms in !vocab', array('!vocab' => $vocabulary->name)),
    'showValues' => 0,
    'animation' => 0,
    'numdivlines' => 1,
  );
  $info->attributes = array();
  $info->width = 400;
  $info->height = $height;
  return theme('fusionchart', $info);
}

function dr_report_taxonomy($vid = NULL) {
  $vocabulary = taxonomy_vocabulary_load($vid);
  $limit = $_GET['limit'];
  $header = array(
    array('data' => t('Term'), 'field' => 'term_data_name'),
    array('data' => t('Threads'), 'field' => 'count_nid'),
    array('data' => t('Comments')),
  );

  $sql = "SELECT td.tid AS tid, 
          td.name AS term_data_name,
          COUNT(n.nid) AS count_nid
          FROM {node} n 
            LEFT JOIN {term_node} tn ON n.vid = tn.vid
            LEFT JOIN {term_data} td ON tn.tid = td.tid
          WHERE (n.status <> 0) 
            AND (td.vid = %d)
          GROUP BY td.name ";

  $tablesort = tablesort_sql($header);
  $sql .= $tablesort;

  if ($limit) {
    $sql .= " LIMIT %d";
  }

  $result = db_query($sql, $vid, $limit);

  $data = array();
  $count_total = 0;
  while ($row = db_fetch_object($result)) {
    $data[] = array(
      'tid' => $row->tid,
      'name' => $row->term_data_name,
      'count_nid' => $row->count_nid,
    );
    $count_total += $row->count_nid;
  }

  $rows = array();
  $chart_data = array();
  foreach ($data as $row) {
    $sql = "SELECT COUNT(cid) 
            FROM {comments} c
            INNER JOIN {term_node} tn ON c.nid = tn.nid AND tn.tid = %d";
    $count_cid = (int)db_result(db_query($sql, $row['tid']));
    $rows[] = array($row['name'], $row['count_nid'], $count_cid);
    $chart_data[] = array($row['name'], $row['count_nid'] + $count_cid);
  }

  $info->data = $chart_data;
  $info->chart_type = 'Bar 2D';
  $info->settings = array(
    'caption' => t('Posts by term in !vocab', array('!vocab' => $vocabulary->name)),
    'showValues' => 0,
    'animation' => 0,
    'numdivlines' => 1,
    'decimalPrecision' => 0,
  );
  $info->attributes = array();
  $info->width = 600;
  $info->height = 400;

  drupal_set_title(t('Report for terms in vocabulary %game', array('%game' => $vocabulary->name)));
  $out .= '<div style="text-align:center;">'. theme('fusionchart', $info) .'</div>';
  $out .= drupal_get_form('dr_report_taxonomy_filter', $vid);
  $out .= theme('table', $header, $rows);
  return $out;
}

function dr_thread_taxonomy_totals($nid, $vid) {
  $node = node_load($nid);
  $vocabulary = taxonomy_vocabulary_load($vid);

  $sql = "SELECT td.name AS name,
          COUNT(c.cid) AS num
          FROM {comments} c
            LEFT JOIN {term_comment} tc ON c.cid = tc.cid
            LEFT JOIN {term_data} td ON tc.tid = td.tid
          WHERE c.nid = %d
            AND td.vid = %d
          GROUP BY td.name
          ORDER BY num DESC
          LIMIT 10";
  $result = db_query($sql, $nid, $vid);

  $data = array();
  $count_total = 0;
  while ($row = db_fetch_object($result)) {
    $data[] = array($row->name, $row->num);
    $count_total += $row->num;
  }

  if (!count($data)) {
    return;
  }
  $info->data = $data;
  $info->chart_type = 'Bar 2D';
  $info->settings = array(
    'caption' => t('Terms in !vocab', array('!vocab' => $vocabulary->name)),
    'shownames' => 1,
    'showValues' => 0,
    'animation' => 0,
    'yAxisMinValue' => 0,
    'yAxisMaxValue' => $node->comment_count,
    'numdivlines' => 1,
  );
  $info->attributes = array();
  $info->width = '400';
  $info->height = 300;

  $out .= theme('fusionchart', $info);
  return $out;
}

function dr_user_activity_by_date($uid) {
  $user = user_load(array('uid' => $uid));
  $dates = array();
  $date_start = strtotime(format_date($user->created, 'custom', 'Y-m-d'));
  $total = 0;
  
  // Nodes
  $sql = "SELECT
          COUNT(nid) AS num,
          FROM_UNIXTIME(created, '%%Y-%%m-%%d') AS day
          FROM {node} n
          WHERE uid = %d
          GROUP BY day
          ORDER BY day";
  $result = db_query($sql, $uid);
  while ($row = db_fetch_object($result)) {
    $timestamp = strtotime($row->day);
    $dates[$timestamp] += $row->num;
    $date_end = $timestamp;
  }
  
  // Comments
  $sql = "SELECT
          COUNT(cid) AS num,
          FROM_UNIXTIME(timestamp, '%%Y-%%m-%%d') AS day
          FROM {comments} c
          WHERE uid = %d
          GROUP BY day
          ORDER BY day";
  $result = db_query($sql, $uid);
  while ($row = db_fetch_object($result)) {
    $timestamp = strtotime($row->day);
    $dates[$timestamp] += $row->num;
    if ($timestamp > $date_end) {
      $date_end = $timestamp;
    }
  }

  return dr_chart_activity_by_date($dates, $date_start, $date_end);
}

function dr_user_taxonomy_activity_by_date($uid, $vid) {
  $user = user_load(array('uid' => $uid));
  $vocabulary = taxonomy_vocabulary_load($vid);
  $terms = taxonomy_get_tree($vid);
  $series = array();
  $categories = array();
  $date_start = strtotime(format_date($user->created, 'custom', 'Y-m-d'));
  $date_end = NULL; 
  $sql = "SELECT td.tid,
            td.name, 
            COUNT(c.cid) AS num,
            FROM_UNIXTIME(c.timestamp, '%%Y-%%m-%%d') AS day
          FROM {term_data} td
            LEFT JOIN {term_comment} tc ON tc.tid = td.tid
            LEFT JOIN {comments} c ON c.cid = tc.cid AND c.uid = %d
          WHERE td.vid = %d
          GROUP BY tid, day
          ORDER BY day, tid";
  $result = db_query($sql, $uid, $vid);
  while ($row = db_fetch_object($result)) {
    $date = strtotime($row->day);
    $series[check_plain($row->name)][$date] += $row->num;
    if ($date > $date_end) {
      $date_end = $date;
    }
  }

  if (!$date_end) {
    return;
  }
  // Fill in dates
  foreach ($series as $term => $dates) {
    //dr_fill_array_dates($dates, $date_start, $date_end);
    //dr_filter_array($dates, 50);
    $new_dates = array();
    foreach ($dates as $date => $count) {
      if ($date && $count) {
        $new_dates[format_date($date, 'custom', 'Y-m-d')] = $count;
      }
    }
    $series[$term] = $new_dates;
  }
  $chart_data = array();
  $category_totals = array();
  foreach ($series as $category => $data) {
    foreach ($data as $key => $value) {
      $category_totals[$category] += $value;
      $chart_data[] = array($category, $key, $value);
      //$chart_data[] = array($category, $key, $category_totals[$category]);
    }
  }
  $info->data = $chart_data;
  $info->chart_type = 'Multi-series Line 2D';
  $info->settings = array(
    'caption' => t('Activity by term in !vocab', array('!vocab' => $vocabulary->name)),
    'animation' => 0,
    'shownames' => 0,
    'showValues' => 0,
    'showAnchors' => 0,
    'numVDivLines' => 4,
    'numdivlines' => 4,
    'showAreaBorder' => 0,
    'areaAlpha' => 50,
    'showShadow' => 0,
    'xAxisName' => format_date($date_start, 'custom', 'Y-m-d') .' to '. format_date($date_end, 'custom', 'Y-m-d'),
    'yAxisName' => t('Posts'),
    'decimalPrecision' => 0,
  );
  $info->attributes = array(
  );
  $info->width = 400;
  $info->height = 300 + (count($terms) * 5);

  $out .= theme('fusionchart', $info);
  return $out;


}

function dr_thread_taxonomy_activity_by_date($nid, $vid) {
  $node = node_load($nid);
  $vocabulary = taxonomy_vocabulary_load($vid);
  $terms = taxonomy_get_tree($vid);
  $series = array();
  $categories = array();
  $date_start = strtotime(format_date($node->created, 'custom', 'Y-m-d'));
  $date_end = NULL; 
  $sql = "SELECT td.tid,
            td.name, 
            COUNT(c.cid) AS num,
            FROM_UNIXTIME(c.timestamp, '%%Y-%%m-%%d') AS day
          FROM {term_data} td
            INNER JOIN {term_comment} tc ON tc.tid = td.tid
            INNER JOIN {comments} c ON c.cid = tc.cid AND c.nid = %d
          WHERE td.vid = %d
          GROUP BY tid, day
          ORDER BY day, tid";
  $result = db_query($sql, $nid, $vid);
  while ($row = db_fetch_object($result)) {
    $date = strtotime($row->day);
    $series[$row->name][$date] += $row->num;
    if ($date > $date_end) {
      $date_end = $date;
    }
  }

  if (!$date_end) {
    return;
  }

  // Fill in dates
  foreach ($series as $term => $dates) {
    dr_fill_array_dates($dates, $date_start, $date_end);
    dr_filter_array($dates, 50);
    $new_dates = array();
    foreach ($dates as $date => $count) {
      $new_dates[format_date($date, 'custom', 'Y-m-d')] = $count;
    }
    $series[$term] = $new_dates;
  }
  
  $chart_data = array();
  $category_totals = array();
  foreach ($series as $category => $data) {
    foreach ($data as $key => $value) {
      $category_totals[$category] += $value;
      $chart_data[] = array($category, $key, $value);
      //$chart_data[] = array($category, $key, $category_totals[$category]);
    } 
  }

  $info->data = $chart_data;
  $info->chart_type = 'Multi-series Line 2D';
  $info->settings = array(
    'caption' => t('Activity by term in !vocab', array('!vocab' => $vocabulary->name)),
    'animation' => 0,
    'shownames' => 0,
    'showValues' => 0,
    'showAnchors' => 0,
    'numVDivLines' => 4,
    'numdivlines' => 4,
    'showAreaBorder' => 0,
    'areaAlpha' => 50,
    'showShadow' => 0,
    'xAxisName' => format_date($date_start, 'custom', 'Y-m-d') .' to '. format_date($date_end, 'custom', 'Y-m-d'),
    'yAxisName' => t('Posts'),
    'decimalPrecision' => 0,
  );
  $info->attributes = array(
  );
  $info->width = 400;
  $info->height = 300 + (count($terms) * 5);

  $out .= theme('fusionchart', $info);
  return $out;

 
}

function dr_thread_activity_by_date($nid) {
  $node = node_load($nid);
  $date_start = strtotime(format_date($node->created, 'custom', 'Y-m-d'));
  $dates[$date_start] = 1;
  $date_end = NULL;

  $sql = "SELECT 
          COUNT(cid) AS num, 
          FROM_UNIXTIME(timestamp, '%%Y-%%m-%%d') AS day 
          FROM {comments} 
          WHERE nid = %d 
          GROUP BY day 
          ORDER BY day";
  $result = db_query($sql, $nid);
  while ($row = db_fetch_object($result)) {
    $timestamp = strtotime($row->day);
    $dates[$timestamp] += $row->num;
    $date_end = $timestamp;
  }

  return dr_chart_activity_by_date($dates, $date_start, $date_end);
}

function dr_chart_activity_by_date($dates, $date_start, $date_end) {
  // Fill the array out with any empty dates
  dr_fill_array_dates($dates, $date_start, $date_end);

  // Filter the results to a reasonable number ~100
  dr_filter_array($dates, 100);

  $chart_data = array();
  $chart_data_total = array();
  $total = 0;
  foreach ($dates as $date => $count) {
    $total += $count;
    $chart_data[] = array(
      format_date($date, 'custom', 'Y-m-d'),
      $count,
    );
    $chart_data_total[] = array(
      format_date($date, 'custom', 'Y-m-d'),
      $total,
    );
  }

  // TODO: Finish making a multi-series chart w/ totals

  $info->data = $chart_data;
  $info->chart_type = 'Line 2D';
  $info->settings = array(
    'caption' => t('Activity over time'),
    'animation' => 0,
    'shownames' => 0,
    'showValues' => 0,
    'showAnchors' => 0,
    'numVDivLines' => 1,
    'numdivlines' => 1,
    'lineColor' => 'ff3333',
    'xAxisName' => format_date($date_start, 'custom', 'Y-m-d') .' to '. format_date($date_end, 'custom', 'Y-m-d'),
    'yAxisName' => t('Posts'),
    'decimalPrecision' => 0,
  );
  $info->attributes = array(
    'color' => array('ff3333'),
  );
  $info->width = 400;
  $info->height = 200;

  $out .= theme('fusionchart', $info);
  return $out;
}

function dr_fill_array_dates(&$dates, $start, $end) {
  // Make sure there's an entry for every day in the thread
  $date = $start;
  while ($date <= $end) {
    if (!array_key_exists($date, $dates)) {
      $dates[$date] = 0;
    }
    $date += (24 * 60 * 60);
  }
  ksort($dates);
}

function dr_filter_array(&$data, $max) {
  $count = count($data);
  if ($count > $max) {
    $new_data = array();
    $scale = round($count / $max);
    if ($scale > 1) {
      $i = 0;
      $key_tmp = '';
      $count_tmp = 0;
      foreach ($data as $key => $value) {
        $i++;
        $value_tmp += $value;
        if ($i == 1) {
          $key_tmp = $key;
        }
        if ($i == $scale) {
          $new_data[$key_tmp] = $value_tmp;
          $i = 0;
          $value_tmp = 0;
        }
      }
      $data = $new_data;
    }
  }
}

/**
 * Menu callback
 */
function dr_node_form_js($node) {
  $out = drupal_get_form('dr_node_form', $node);
  print $out;
  exit;
}

/**
 * Menu callback
 */
function dr_comment_form_js($comment) {
  $node = node_load($comment->nid);
  $out = drupal_get_form('dr_node_form', $node, $comment);
  print $out;
  exit;
}

/**
 * Implementation of hook_block().
 */
function dr_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'terms' => array(
        'info' => t('Quick taxonomy edit'),
      ),
    );
  }

  if ($op == 'view') {
    switch ($delta) {
      case 'terms':
        $content = dr_block_terms();
        if ($content) {
          return array(
            'subject' => t('Taxonomy'),
            'content' => $content,
          );
        }
        break;
    }
  }
}

function dr_block_terms() {
  $node = dr_determine_context();
  if ($node && node_access('update', $node)) {
    $out = drupal_get_form('dr_node_form', $node);
  }
  return $out;
}

function dr_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    if ($form['nid']['#value']) {
//      $form['#redirect'] = 'node/'.$form['nid']['#value'].'/edit';
//      $form['#validate'][] = 'dr_node_form_validate';
//      $form['#submit'][] = 'dr_node_form_submit'; 
    } 
    else {
//      $form['#redirect'] = 'review';
    }
  }
}

/**
 * Much of this pulled from taxonomy_form_alter()
 */
function dr_node_form(&$form_state, $node, $comment = NULL) {
  $form = array();
  if ($comment) {
    $comment->taxonomy = dr_comment_get_terms($comment);
    $terms = $comment->taxonomy;
  }
  else {
    $terms = $node->taxonomy;
  }

  $sql = "SELECT v.* FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = '%s' ORDER BY v.weight, v.name";
  $c = db_query(db_rewrite_sql($sql, 'v', 'vid'), $node->type);

  while ($vocabulary = db_fetch_object($c)) {
    if (!$vocabulary->tags) {
      // Extract terms belonging to the vocabulary in question.
      $default_terms = array();
      foreach ($terms as $term) {
        // Free tagging has no default terms and also no vid after preview.
        if (isset($term->vid) && $term->vid == $vocabulary->vid) {
          $default_terms[$term->tid] = $term;
        }
      }
      $form['taxonomy'][$vocabulary->vid] = taxonomy_form($vocabulary->vid, array_keys($default_terms), filter_xss_admin($vocabulary->help));
      $form['taxonomy'][$vocabulary->vid]['#weight'] = $vocabulary->weight;
      $form['taxonomy'][$vocabulary->vid]['#required'] = $vocabulary->required;
    }
  }

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  if ($comment) {
    $form['cid'] = array(
      '#type' => 'value',
      '#value' => $comment->cid,
    );
  }
  $form['taxonomy']['#tree'] = TRUE;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
//  $form['#redirect'] = 'node/'. $node->nid .'/edit';

  return $form;
}

function dr_node_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  // Parse the taxonomy
  $tids = array();
  $terms = $values['taxonomy'];

  // Pulled from taxonomy_node_save()
  if (is_array($terms)) {
    foreach ($terms as $term) {
      if (is_array($term)) {
        foreach ($term as $tid) {
          if ($tid) {
            $tids[] = $tid;
          }
        }
      }
      else if (is_object($term)) {
        $tids[] = $term->tid;
      }
      else if ($term) {
        $tids[] = $term;
      }
    }
  }

  // Get any parent terms for each term
  foreach ($tids as $tid) {
    $parents = taxonomy_get_parents_all($tid);
    $parent_tids = array();
    foreach ($parents as $parent) {
      $parent_tids[] = $parent->tid;
    }
    $tids = array_merge($tids, $parent_tids);
  }

  $form_state['values']['taxonomy'] = array_unique($tids);
}

function dr_node_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['nid'] && $values['cid']) {
    $nid = $values['nid'];
    $cid = $values['cid'];
    // Clear out the existing term mappings
    db_query('DELETE FROM {term_comment} WHERE cid = %d', $cid);
    $sql = 'INSERT INTO {term_comment} (cid, tid, nid) VALUES (%d, %d, %d)';
    foreach ($values['taxonomy'] as $tid) {
      db_query($sql, $cid, $tid, $nid);
    }
    drupal_set_message(t('Saved comment taxonomy'));
  }

  else {
    $node = node_load($values['nid']);
    $node->taxonomy = $values['taxonomy'];
    node_save($node);
  }

  // Are we coming from a sub-page
  $referer = parse_url($_SERVER['HTTP_REFERER']);
  $query = $referer['query'];

  $fragment = NULL;
  if ($cid) {
    $fragment = 'comment-'. $cid;
  }
  drupal_goto('node/'. $values['nid'] .'/edit', $query, $fragment);
}

function dr_determine_context() {
  $item = menu_get_item();
  $object = menu_get_object();

  if (!empty($object->nid)) {
    // Don't display on edit pages
    if ($item['map'][2] == 'edit') {
      return;
    }
    $node = $object;
    return $node;
  }
}

function dr_comment_get_terms($comment, $key = 'tid') {
  static $terms;

  if (!isset($terms[$comment->vid][$key])) {
    $result = db_query(db_rewrite_sql('SELECT t.* FROM {term_comment} r INNER JOIN {term_data} t ON r.tid = t.tid INNER JOIN {vocabulary} v ON t.vid = v.vid WHERE r.cid = %d ORDER BY v.weight, t.weight, t.name', 't', 'tid'), $comment->cid);
    $terms[$comment->cid][$key] = array();
    while ($term = db_fetch_object($result)) {
      $terms[$comment->cid][$key][$term->$key] = $term;
    }
  }
  return $terms[$comment->cid][$key];
}

/**
 * Implementation of hook_comment().
 */
function dr_comment(&$a1, $op) {
  switch ($op) {
    case 'view':
      $comment = $a1;
      $comment->taxonomy = dr_comment_get_terms($comment);
      break;
  }
}
