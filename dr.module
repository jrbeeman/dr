<?php

define('DR_POST_TYPE', 'dr_post');
define('DR_USER_TYPE', 'dr_user');
define('DR_COLLECTION_TYPE', 'dr_collection');

module_load_include('inc', 'dr', 'dr.reports');

/**
 * Implementation of hook_menu().
 */
function dr_menu() {
  $items = array();
  // Taxonomy report
  $items['report/taxonomy'] = array(
    'page callback' => 'dr_report_taxonomy',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Utility for reports
 * - Make sure there's an entry for every day in the thread
 */
function dr_fill_array_dates(&$dates, $start, $end) {
  $one_day = 24 * 60 * 60;
  $two_days = 2 * $one_day;

  // Make sure the array has at least 3 items
  if ($start == $end || ($end - $start) < $one_day) {
    $start -= $one_day;
    $end += $one_day;
  }
  if (($end - $start) < $two_days) {
    $end += $one_day;
  }

  $date = $start;
  while ($date <= $end) {
    if (!array_key_exists($date, $dates)) {
      $dates[$date] = 0;
    }
    $date += (24 * 60 * 60);
  }
  ksort($dates);
}

function dr_filter_array(&$data, $max) {
  $count = count($data);
  $gi = 0; // global counter that doesn't reset (for the run of the method)
  if ($count > $max) {
    $new_data = array();
    $scale = round($count / $max);
    if ($scale > 1) {
      $i = 0;
      $key_tmp = '';
      $count_tmp = 0;
      foreach ($data as $key => $value) {
        $i++;
        $gi++;
        $value_tmp += $value;
        if ($i == 1) {
          $key_tmp = $key;
        }
        if ($i == $scale || $gi == $count) {
          $new_data[$key_tmp] = $value_tmp;
          $i = 0;
          $value_tmp = 0;
        }
      }
      $data = $new_data;
    }
  }
}

/**
 * Implementation of hook_block().
 */
function dr_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['taxonomy'] = array(
      'info' => t('DR Report: Taxonomy'),
    );
    $blocks['collection_taxonomy'] = array(
      'info' => t('DR Report: Collection taxonomy'),
    );
    $blocks['collection_activity'] = array(
      'info' => t('DR Report: Collection activity by date'),
    );
    $blocks['post_taxonomy'] = array(
      'info' => t('DR Report: Thread taxonomy'),
    );
    $blocks['post_activity'] = array(
      'info' => t('DR Report: Thread activity by date'),
    );
    $blocks['post_taxonomy_activity'] = array(
      'info' => t('DR Report: Thread taxonomy activity by date'),
    );
    $blocks['user_taxonomy'] = array(
      'info' => t('DR Report: User taxonomy'),
    );
    $blocks['user_activity'] = array(
      'info' => t('DR Report: User activity by date'),
    );
    $blocks['user_taxonomy_activity'] = array(
      'info' => t('DR Report: User taxonomy activity by date'),
    );

    // Set the caching for all blocks to be per-page
    foreach ($blocks as $key => $block) {
      $block['cache'] = BLOCK_CACHE_PER_PAGE;
      $blocks[$key] = $block;
    }
    return $blocks;
  }

  if ($op == 'view') {
    $function = 'dr_block_'. $delta;
    $block = $function();
    return $block;
  }
}

/** ---- Activity reports ---- **/

function dr_block_collection_activity() {
  return _dr_block_object_activity(DR_COLLECTION_TYPE);
}

function dr_block_post_activity() {
  return _dr_block_object_activity(DR_POST_TYPE);
}

function dr_block_user_activity() {
  return _dr_block_object_activity(DR_USER_TYPE);
}

function _dr_block_object_activity($type) {
  $allowed_types = array(DR_COLLECTION_TYPE, DR_POST_TYPE, DR_USER_TYPE);

  // Only show when viewing a node
  if (arg(0) == 'node' && is_numeric(arg(1)) && in_array($type, $allowed_types)) {
    $node = node_load(arg(1));

    $dates = array();
    $date_start = NULL;
    $date_end = NULL;

    // Collection nodes
    if ($type == DR_COLLECTION_TYPE) {
      $sql = "SELECT
              n.nid, n.vid,
              cck.field_dr_date_value AS date
              FROM {node} n
              INNER JOIN {content_type_dr_post} cck ON n.vid = cck.vid
              INNER JOIN {content_field_dr_collection} f ON n.vid = f.vid
              WHERE f.field_dr_collection_nid = %d";
      $result = db_query($sql, $node->nid);
    }

    // Post nodes
    if ($type == DR_POST_TYPE) {
      $sql = "SELECT
              n.nid, n.vid,
              cck.field_dr_date_value AS date
              FROM {node} n
              INNER JOIN {content_type_dr_post} cck ON n.vid = cck.vid
              WHERE cck.field_dr_parent_nid = %d";
      $result = db_query($sql, $node->nid);
    }

    // User nodes
    if ($type == DR_USER_TYPE) {
      $sql = "SELECT
              n.nid, n.vid,
              cck.field_dr_date_value AS date
              FROM {node} n
              INNER JOIN {content_type_dr_post} cck ON n.vid = cck.vid
              WHERE cck.field_dr_user_nid = %d";
      $result = db_query($sql, $node->nid);
    }

    while ($row = db_fetch_object($result)) {
      $timestamp = strtotime(format_date($row->date, 'custom', 'Y-m-d'));
      // Negotiate the start and end date
      if ($timestamp < $date_start || !$date_start) {
        $date_start = $timestamp;
      }
      if ($timestamp > $date_end || !$date_end) {
        $date_end = $timestamp;
      }
      $dates[$timestamp]++;
      $date_end = $timestamp;
    }

    return array(
      'subject' => t('Activity'),
      'content' => dr_chart_activity_by_date($dates, $date_start, $date_end),
    );
  }
}

/** ---- Taxonomy reports ---- **/

function dr_block_collection_taxonomy() {
  return _dr_block_object_taxonomy(DR_COLLECTION_TYPE);
}

function dr_block_post_taxonomy() {
  return _dr_block_object_taxonomy(DR_POST_TYPE);
}

function dr_block_user_taxonomy() {
  return _dr_block_object_taxonomy(DR_USER_TYPE);
}

function _dr_block_object_taxonomy($type) {
  $allowed_types = array(DR_COLLECTION_TYPE, DR_POST_TYPE, DR_USER_TYPE);

  // Only show when viewing a node
  if (arg(0) == 'node' && is_numeric(arg(1)) && in_array($type, $allowed_types)) {
    $node = node_load(arg(1));

    // Check if this is a child post of a larger thread and, therefore, has no thread activity
    if (($node->type == DR_POST_TYPE) && ($node->field_dr_parent[0]['nid'])) {
      return;
    }

    $out = '';

    // Get all the vocabularies for the post node type
    $vocabs = taxonomy_get_vocabularies(DR_POST_TYPE);
    foreach ($vocabs as $vid => $vocab) {
      $info = new stdClass();
      $data = array();
      $count_total = 0;

      // Collection nodes
      if ($type == DR_COLLECTION_TYPE) {
        $sql = "SELECT
                  td.tid AS tid, 
                  td.name AS term_name,
                  COUNT(tc.tid) AS num
                FROM term_chunk tc
                  INNER JOIN {content_field_dr_collection} f ON tc.nid = f.nid
                  INNER JOIN {node} n ON n.vid = f.vid
                  INNER JOIN {term_data} td ON tc.tid = td.tid
                WHERE f.field_dr_collection_nid = %d
                  AND td.vid = %d
                GROUP BY tc.tid
                ORDER BY td.weight ASC";
        $result = db_query($sql, $node->nid, $vid);
      }

      // Post nodes
      if ($type == DR_POST_TYPE) {
        $sql = "SELECT
                  td.tid AS tid, 
                  td.name AS term_name,
                  COUNT(tc.tid) AS num
                FROM term_chunk tc
                  INNER JOIN {content_type_dr_post} cck ON tc.nid = cck.nid
                  INNER JOIN {node} n ON n.vid = cck.vid
                  INNER JOIN {term_data} td ON tc.tid = td.tid
                WHERE (cck.field_dr_parent_nid = %d OR cck.nid = %d)
                  AND td.vid = %d
                GROUP BY tc.tid
                ORDER BY td.weight ASC";
        $result = db_query($sql, $node->nid, $node->nid, $vid);
      }

      // User nodes
      if ($type == DR_USER_TYPE) {
        $sql = "SELECT
                  td.tid AS tid, 
                  td.name AS term_name,
                  COUNT(tc.tid) AS num
                FROM term_chunk tc
                  INNER JOIN {content_type_dr_post} cck ON tc.nid = cck.nid
                  INNER JOIN {node} n ON n.vid = cck.vid
                  INNER JOIN {term_data} td ON tc.tid = td.tid
                WHERE cck.field_dr_user_nid = %d
                  AND td.vid = %d
                GROUP BY tc.tid
                ORDER BY td.weight ASC";
        $result = db_query($sql, $node->nid, $vid);
      }

      // Parse the results
      while ($row = db_fetch_object($result)) {
        $data[] = array($row->term_name, $row->num);
        $count_total += $row->num;
      }

      // Don't render a chart if the data is empty
      if (!count($data)) {
        continue;
      }
      $info->data = $data;
      $info->chart_type = 'Bar 2D';
      $info->settings = array(
        'caption' => t('Terms in !vocab', array('!vocab' => $vocab->name)),
        'shownames' => 1,
        'showValues' => 0,
        'animation' => 0,
        'yAxisMinValue' => 0,
        'yAxisMaxValue' => $count_total,
        'numdivlines' => 1,
      );
      $info->attributes = array();
      $info->width = 400;
      $info->height = 300;
      
      $out .= theme('fusionchart', $info);
    }
  }
  return array(
    'subject' => t('Taxonomy term usage'),
    'content' => $out,
  );
}